(function() {
  var $;

  $ = jQuery;

  $.extend(REPLIT, {
    exampleContent: [
      {
        name: "PutItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#put-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html",
        code: "var params = {\n    TableName: 'table_name',\n    Item: { // a map of attribute name to AttributeValue\n    \n        attribute_name: attribute_value,\n        // attribute_value (string | number | boolean | null | Binary | DynamoDBSet | Array | Object)\n        // more attributes...\n    },\n    ConditionExpression: 'attribute_not_exists(attribute_name)', // optional String describing the constraint to be placed on an attribute\n    ExpressionAttributeNames: { // a map of substitutions for attribute names with special characters\n        //'#name': 'attribute name'\n    },\n    ExpressionAttributeValues: { // a map of substitutions for all attribute values\n        //':value': 'VALUE'\n    },\n    ReturnValues: 'NONE', // optional (NONE | ALL_OLD)\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n    ReturnItemCollectionMetrics: 'NONE', // optional (NONE | SIZE)\n};\ndocClient.put(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "UpdateItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#update-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html",
        code: "var params = {\n    TableName: 'table_name',\n    Key: { // The primary key of the item (a map of attribute name to AttributeValue)\n\n        attribute_name: attribute_value, //(string | number | boolean | null | Binary)\n        // more attributes...\n    },\n    UpdateExpression: 'SET attribute_name :value', // String representation of the update to an attribute\n        // SET set-action , ... \n        // REMOVE remove-action , ...  (for document support)\n        // ADD add-action , ... \n        // DELETE delete-action , ...  (previous DELETE equivalent)\n    ConditionExpression: 'attribute_exists(attribute_name)', // optional String describing the constraint to be placed on an attribute\n    ExpressionAttributeNames: { // a map of substitutions for attribute names with special characters\n        //'#name': 'attribute name'\n    },\n    ExpressionAttributeValues: { // a map of substitutions for all attribute values\n        ':value': 'VALUE'\n    },\n    ReturnValues: 'NONE', // optional (NONE | ALL_OLD | UPDATED_OLD | ALL_NEW | UPDATED_NEW)\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n    ReturnItemCollectionMetrics: 'NONE', // optional (NONE | SIZE)\n};\ndocClient.update(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "DeleteItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#delete-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html",
        code: "var params = {\n    TableName: 'table_name',\n    Key: { // a map of attribute name to AttributeValue for all primary key attributes\n    \n        attribute_name: attribute_value,\n        // attribute_value (string | number | boolean | null | Binary)\n        // more attributes...\n\n    },\n    ConditionExpression: 'attribute_exists(attribute_name)', // optional String describing the constraint to be placed on an attribute\n    ExpressionAttributeNames: { // a map of substitutions for attribute names with special characters\n        //'#name': 'attribute name'\n    },\n    ExpressionAttributeValues: { // a map of substitutions for all attribute values\n        //':value': 'VALUE'\n    },\n    ReturnValues: 'NONE', // optional (NONE | ALL_OLD)\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n    ReturnItemCollectionMetrics: 'NONE', // optional (NONE | SIZE)\n};\ndocClient.delete(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "BatchWriteItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#batchWrite-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html",
        code: "var params = {\n    RequestItems: { // A map of TableName to Put or Delete requests for that table\n        table_name_1: [ // a list of Put or Delete requests for that table\n            { // An example PutRequest\n                PutRequest: {\n                    Item: { // a map of attribute name to AttributeValue    \n                        attribute_name: attribute_value,\n                        // attribute_value (string | number | boolean | null | Binary | DynamoDBSet | Array | Object)\n                        // ... more attributes ...\n                    }\n                }\n            },\n            { // An example DeleteRequest\n                DeleteRequest: {\n                    Key: { \n                        key_attribute_name: attribute_value, //(string | number | boolean | null | Binary)\n                        // more primary attributes (if the primary key is hash/range schema)\n                    }\n                }\n            },\n            // ... more put or delete requests ...\n        ],\n        // ... more tables ...\n    },\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n    ReturnItemCollectionMetrics: 'NONE', // optional (NONE | SIZE)\n};\ndocClient.batchWrite(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "GetItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#get-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html",
        code: "var params = {\n    TableName: 'table_name',\n    Key: { // a map of attribute name to AttributeValue for all primary key attributes\n    \n        attribute_name: attribute_value, //(string | number | boolean | null | Binary)\n        // more attributes...\n\n    },\n    AttributesToGet: [ // optional (list of specific attribute names to return)\n        'attribute_name',\n        // ... more attribute names ...\n    ],\n    ConsistentRead: false, // optional (true | false)\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n};\ndocClient.get(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "BatchGetItem",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#batchGet-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html",
        code: "var params = {\n    RequestItems: { // map of TableName to list of Key to get from each table\n        table_name_1: {\n            Keys: [ // a list of primary key value maps\n                {\n                    key_attribute_name: attribute_value, //(string | number | boolean | null | Binary)\n                    // ... more key attributes, if the primary key is hash/range\n                },\n                // ... more keys to get from this table ...\n            ],\n            AttributesToGet: [ // option (attributes to retrieve from this table)\n                'attribute_name',\n                // ... more attribute names ...\n            ],\n            ConsistentRead: false, // optional (true | false)\n        },\n        // ... more tables and keys ...\n    },\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n};\ndocClient.batchGet(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n\n});"
      }, {
        name: "Query",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#query-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html",
        code: "var params = {\n    TableName: 'table_name',\n    IndexName: 'index_name', // optional (if querying an index)\n    KeyConditionExpression: 'attribute_name = :value', // a string representing a constraint on the attribute\n    FilterExpression: 'attr_name = :val', // a string representing a constraint on the attribute\n    ExpressionAttributeNames: { // a map of substitutions for attribute names with special characters\n        //'#name': 'attribute name'\n    },\n    ExpressionAttributeValues: { // a map of substitutions for all attribute values\n      ':value': 'STRING_VALUE',\n      ':val': 0\n    },\n    ScanIndexForward: true, // optional (true | false) defines direction of Query in the index\n    Limit: 0, // optional (limit the number of items to evaluate)\n    ConsistentRead: false, // optional (true | false)\n    Select: 'ALL_ATTRIBUTES', // optional (ALL_ATTRIBUTES | ALL_PROJECTED_ATTRIBUTES | \n                              //           SPECIFIC_ATTRIBUTES | COUNT)\n    AttributesToGet: [ // optional (list of specific attribute names to return)\n        'attribute_name',\n        // ... more attributes ...\n    ],\n    ExclusiveStartKey: { // optional (for pagination, returned by prior calls as LastEvaluatedKey)\n        attribute_name: attribute_value,\n        // attribute_value (string | number | boolean | null | Binary | DynamoDBSet | Array | Object)\n        // anotherKey: ...\n\n    },\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n};\ndocClient.query(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "Scan",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#scan-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html",
        code: "var params = {\n    TableName: 'table_name',\n    Limit: 0, // optional (limit the number of items to evaluate)\n    FilterExpression: 'attribute_name = :value', // a string representing a constraint on the attribute\n    ExpressionAttributeNames: { // a map of substitutions for attribute names with special characters\n        //'#name': 'attribute name'\n    },\n    ExpressionAttributeValues: { // a map of substitutions for all attribute values\n        ':value': 'STRING_VALUE'\n    },\n    Select: 'ALL_ATTRIBUTES', // optional (ALL_ATTRIBUTES | ALL_PROJECTED_ATTRIBUTES | \n                              //           SPECIFIC_ATTRIBUTES | COUNT)\n    AttributesToGet: [ // optional (list of specific attribute names to return)\n        'attribute_name',\n        // ... more attributes ...\n    ],\n    ConsistentRead: false, // optional (true | false)\n    Segment: 0, // optional (for parallel scan)\n    TotalSegments: 0, // optional (for parallel scan)\n    ExclusiveStartKey: { // optional (for pagination, returned by prior calls as LastEvaluatedKey)\n        attribute_name: attribute_value,\n        // attribute_value (string | number | boolean | null | Binary | DynamoDBSet | Array | Object)\n        // anotherKey: ...\n    },\n    ReturnConsumedCapacity: 'NONE', // optional (NONE | TOTAL | INDEXES)\n};\ndynamodb.scan(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "CreateTable",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#createTable-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html",
        code: "var params = {\n    TableName: 'table_name',\n    KeySchema: [ // The type of of schema.  Must start with a HASH type, with an optional second RANGE.\n        { // Required HASH type attribute\n            AttributeName: 'hash_key_attribute_name',\n            KeyType: 'HASH',\n        },\n        { // Optional RANGE key type for HASH + RANGE tables\n            AttributeName: 'range_key_attribute_name', \n            KeyType: 'RANGE', \n        }\n    ],\n    AttributeDefinitions: [ // The names and types of all primary and index key attributes only\n        {\n            AttributeName: 'hash_key_attribute_name',\n            AttributeType: 'S', // (S | N | B) for string, number, binary\n        },\n        {\n            AttributeName: 'range_key_attribute_name',\n            AttributeType: 'S', // (S | N | B) for string, number, binary\n        },\n        {\n            AttributeName: 'index_hash_key_attribute_name_1',\n            AttributeType: 'S', // (S | N | B) for string, number, binary\n        },\n        {\n            AttributeName: 'index_range_key_attribute_name_1',\n            AttributeType: 'S', // (S | N | B) for string, number, binary\n        },\n        {\n            AttributeName: 'index_range_key_attribute_name_2',\n            AttributeType: 'S', // (S | N | B) for string, number, binary\n        },\n        \n        // ... more attributes ...\n    ],\n    ProvisionedThroughput: { // required provisioned throughput for the table\n        ReadCapacityUnits: 1, \n        WriteCapacityUnits: 1, \n    },\n    GlobalSecondaryIndexes: [ // optional (list of GlobalSecondaryIndex)\n        { \n            IndexName: 'index_name_1', \n            KeySchema: [\n                { // Required HASH type attribute\n                    AttributeName: 'index_hash_key_attribute_name_1',\n                    KeyType: 'HASH',\n                },\n                { // Optional RANGE key type for HASH + RANGE secondary indexes\n                    AttributeName: 'index_range_key_attribute_name_1', \n                    KeyType: 'RANGE', \n                }\n            ],\n            Projection: { // attributes to project into the index\n                ProjectionType: 'INCLUDE', // (ALL | KEYS_ONLY | INCLUDE)\n                NonKeyAttributes: [ // required / allowed only for INCLUDE\n                    'attribute_name_1',\n                    // ... more attribute names ...\n                ],\n            },\n            ProvisionedThroughput: { // throughput to provision to the index\n                ReadCapacityUnits: 1,\n                WriteCapacityUnits: 1,\n            },\n        },\n        // ... more global secondary indexes ...\n    ],\n    LocalSecondaryIndexes: [ // optional (list of LocalSecondaryIndex)\n        { \n            IndexName: 'index_name_2',\n            KeySchema: [ \n                { // Required HASH type attribute - must match the table's HASH key attribute name\n                    AttributeName: 'hash_key_attribute_name',\n                    KeyType: 'HASH',\n                },\n                { // alternate RANGE key attribute for the secondary index\n                    AttributeName: 'index_range_key_attribute_name_2', \n                    KeyType: 'RANGE', \n                }\n            ],\n            Projection: { // required\n                ProjectionType: 'INCLUDE', // (ALL | KEYS_ONLY | INCLUDE)\n                NonKeyAttributes: [ // required / allowed only for INCLUDE\n                    'attribute_name_1',\n                    // ... more attribute names ...\n                ],\n            },\n        },\n        // ... more local secondary indexes ...\n    ],\n};\ndynamodb.createTable(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n\n});"
      }, {
        name: "UpdateTable",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#updateTable-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html",
        code: "var params = {\n    TableName: 'table_name',\n    GlobalSecondaryIndexUpdates: [{ // optional\n            Update: {\n                IndexName: 'index_name',\n                ProvisionedThroughput: {\n                    ReadCapacityUnits: 0, \n                    WriteCapacityUnits: 0,\n                },\n            },\n        },\n        // ... more optional indexes ...\n    ],\n    ProvisionedThroughput: {\n        ReadCapacityUnits: 0,\n        WriteCapacityUnits: 0,\n    },\n};\ndynamodb.updateTable(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "DeleteTable",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#deleteTable-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteTable.html",
        code: "var params = {\n    TableName: 'table_name',\n};\ndynamodb.deleteTable(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "DescribeTable",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#describeTable-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html",
        code: "var params = {\n    TableName: 'table_name',\n};\ndynamodb.describeTable(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "ListTables",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#listTables-property",
        apiLink: "http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ListTables.html",
        code: "var params = {\n    ExclusiveStartTableName: 'table_name', // optional (for pagination, returned as LastEvaluatedTableName)\n    Limit: 0, // optional (to further limit the number of table names returned per page)\n};\ndynamodb.listTables(params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }, {
        name: "WaitFor",
        sdkLink: "http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#waitFor-property",
        apiLink: "",
        code: "// Waits for tables to be come ACTIVE.  \n// Useful for waiting for table operations like CreateTable to complete. \nvar params = {\n    TableName: 'table_name',\n};\n// Supports 'tableExists' and 'tableNotExists'\ndynamodb.waitFor('tableExists', params, function(err, data) {\n    if (err) ppJson(err); // an error occurred\n    else ppJson(data); // successful response\n});"
      }
    ]
  });

}).call(this);
