// Code generated by smithy-go-codegen DO NOT EDIT.

package types

import (
	"fmt"
	smithy "github.com/awslabs/smithy-go"
)

// The accelerator that you specified could not be disabled.
type AcceleratorNotDisabledException struct {
	Message *string
}

func (e *AcceleratorNotDisabledException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AcceleratorNotDisabledException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AcceleratorNotDisabledException) ErrorCode() string {
	return "AcceleratorNotDisabledException"
}
func (e *AcceleratorNotDisabledException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The accelerator that you specified doesn't exist.
type AcceleratorNotFoundException struct {
	Message *string
}

func (e *AcceleratorNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AcceleratorNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AcceleratorNotFoundException) ErrorCode() string             { return "AcceleratorNotFoundException" }
func (e *AcceleratorNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// You don't have access permission.
type AccessDeniedException struct {
	Message *string
}

func (e *AccessDeniedException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AccessDeniedException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AccessDeniedException) ErrorCode() string             { return "AccessDeniedException" }
func (e *AccessDeniedException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The listener that you specified has an endpoint group associated with it. You
// must remove all dependent resources from a listener before you can delete it.
type AssociatedEndpointGroupFoundException struct {
	Message *string
}

func (e *AssociatedEndpointGroupFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AssociatedEndpointGroupFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AssociatedEndpointGroupFoundException) ErrorCode() string {
	return "AssociatedEndpointGroupFoundException"
}
func (e *AssociatedEndpointGroupFoundException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The accelerator that you specified has a listener associated with it. You must
// remove all dependent resources from an accelerator before you can delete it.
type AssociatedListenerFoundException struct {
	Message *string
}

func (e *AssociatedListenerFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *AssociatedListenerFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *AssociatedListenerFoundException) ErrorCode() string {
	return "AssociatedListenerFoundException"
}
func (e *AssociatedListenerFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The CIDR that you specified was not found or is incorrect.
type ByoipCidrNotFoundException struct {
	Message *string
}

func (e *ByoipCidrNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ByoipCidrNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ByoipCidrNotFoundException) ErrorCode() string             { return "ByoipCidrNotFoundException" }
func (e *ByoipCidrNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The endpoint group that you specified already exists.
type EndpointGroupAlreadyExistsException struct {
	Message *string
}

func (e *EndpointGroupAlreadyExistsException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EndpointGroupAlreadyExistsException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EndpointGroupAlreadyExistsException) ErrorCode() string {
	return "EndpointGroupAlreadyExistsException"
}
func (e *EndpointGroupAlreadyExistsException) ErrorFault() smithy.ErrorFault {
	return smithy.FaultClient
}

// The endpoint group that you specified doesn't exist.
type EndpointGroupNotFoundException struct {
	Message *string
}

func (e *EndpointGroupNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *EndpointGroupNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *EndpointGroupNotFoundException) ErrorCode() string             { return "EndpointGroupNotFoundException" }
func (e *EndpointGroupNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The CIDR that you specified is not valid for this action. For example, the state
// of the CIDR might be incorrect for this action.
type IncorrectCidrStateException struct {
	Message *string
}

func (e *IncorrectCidrStateException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *IncorrectCidrStateException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *IncorrectCidrStateException) ErrorCode() string             { return "IncorrectCidrStateException" }
func (e *IncorrectCidrStateException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// There was an internal error for AWS Global Accelerator.
type InternalServiceErrorException struct {
	Message *string
}

func (e *InternalServiceErrorException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InternalServiceErrorException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InternalServiceErrorException) ErrorCode() string             { return "InternalServiceErrorException" }
func (e *InternalServiceErrorException) ErrorFault() smithy.ErrorFault { return smithy.FaultServer }

// An argument that you specified is invalid.
type InvalidArgumentException struct {
	Message *string
}

func (e *InvalidArgumentException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidArgumentException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidArgumentException) ErrorCode() string             { return "InvalidArgumentException" }
func (e *InvalidArgumentException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// There isn't another item to return.
type InvalidNextTokenException struct {
	Message *string
}

func (e *InvalidNextTokenException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidNextTokenException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidNextTokenException) ErrorCode() string             { return "InvalidNextTokenException" }
func (e *InvalidNextTokenException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The port numbers that you specified are not valid numbers or are not unique for
// this accelerator.
type InvalidPortRangeException struct {
	Message *string
}

func (e *InvalidPortRangeException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *InvalidPortRangeException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *InvalidPortRangeException) ErrorCode() string             { return "InvalidPortRangeException" }
func (e *InvalidPortRangeException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// Processing your request would cause you to exceed an AWS Global Accelerator
// limit.
type LimitExceededException struct {
	Message *string
}

func (e *LimitExceededException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *LimitExceededException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *LimitExceededException) ErrorCode() string             { return "LimitExceededException" }
func (e *LimitExceededException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }

// The listener that you specified doesn't exist.
type ListenerNotFoundException struct {
	Message *string
}

func (e *ListenerNotFoundException) Error() string {
	return fmt.Sprintf("%s: %s", e.ErrorCode(), e.ErrorMessage())
}
func (e *ListenerNotFoundException) ErrorMessage() string {
	if e.Message == nil {
		return ""
	}
	return *e.Message
}
func (e *ListenerNotFoundException) ErrorCode() string             { return "ListenerNotFoundException" }
func (e *ListenerNotFoundException) ErrorFault() smithy.ErrorFault { return smithy.FaultClient }
